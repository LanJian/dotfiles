snippet class "make a class" !b
import ir_test.util.common_info_mixin


class ${1:`!p snip.rv = ''.join(x.title() for x in re.sub('\..*py', '', fn).split('_'))`}(ir_test.util.common_info_mixin.CommonInfoMixin):
	${2:pass}$0
endsnippet

snippet fix "fixture function" !b
@pytest.fixture
def ${1:FIXTURE_NAME}($0) -> ${2:None}:
	${3:pass}

endsnippet

snippet afix "autouse fixture function" !b
@pytest.fixture(autouse=True)
def ${1:FIXTURE_NAME}($0) -> ${2:None}:
	${3:pass}

endsnippet

snippet before_each "before_each fixture" !b
@pytest.fixture(autouse=True)
def before_each(mocker: pytest_mock.MockerFixture) -> None:$0
	${1:DO_SOMETHING}

endsnippet

snippet sfix "session scoped fixture function" !b
@pytest.fixture(scope='session')
def ${1:FIXTURE_NAME}($0) -> ${2:None}:
	${3:pass}

endsnippet

snippet desc "describe function" !b
def describe_${1:SOMETHING}() -> None:$0
	${2:pass}
endsnippet

snippet "if context" "if context block" !b
def if_${1:SOME_CONTEXT}() -> None:$0
endsnippet

snippet "it test" "it test block" !b
def it_${1:DOES_SOMETHING}() -> None:$0
    assert False
endsnippet

snippet "async it test" "async it test block" !b
@pytest.mark.asyncio
async def it_${1:DOES_SOMETHING}() -> None:$0
    assert False
endsnippet

snippet "patch (.*)" "patch MATCH" !br
patched = mocker.patch('`!p snip.rv = match.group(1)`', autospec=True)
patched.return_value = ${1:RETURN_VALUE}
return patched$0
endsnippet

snippet "opatch" "patch some object" !br
mocker.patch.object(${1:OBJECT}, "${2:FUNCTION}", autospec=True).return_value = ${3:RETURN_VALUE}
endsnippet

snippet fpatch "fixture patch" !b
@pytest.fixture$5
def mocked_${1:NAME}(mocker$4):
	patched = mocker.patch('${2:FUNCTION}', autospec=True)
	patched.return_value = ${3:RETURN_VALUE}
	return patched$0
endsnippet

snippet fopatch "fixture object patch" !b
@pytest.fixture$5
def mocked_${7:$2}(mocker, ${1:OBJECT}$4):
	patched = mocker.patch.object(${6:$1}, '${2:FUNCTION}', autospec=True)
	patched.return_value = ${3:RETURN_VALUE}
	return patched$0
endsnippet

snippet comfail "mock command failure" !b
@pytest.fixture
def mocked_command_returncode():
	return 1$0
endsnippet

snippet comfix "command fixture args" !w
mocked_command, mocked_command_instance$0
endsnippet

snippet asscom "mocked command assertions" !b
mocked_command.assert_called_once_with(
	$1)
mocked_command_instance.run.assert_called_once_with()$0
endsnippet

snippet xfail "mark as xfail" !b
@pytest.mark.xfail(reason="${1:REASON}")$0
endsnippet

snippet todo "todo" !w
# TODO jackhxs `date +%Y-%m-%d`: ${1:msg}
endsnippet

snippet dnc "do not commit" !w
# DO NOT COMMIT
endsnippet

snippet fixme "fixme" !w
# FIXME jackhxs `date +%Y-%m-%d`: ${1:msg} 
endsnippet

snippet rip "random ip" !w
`!p if not snip.c: snip.rv = random_ip()`$0
endsnippet

snippet ris "random ipv6" !w
`!p if not snip.c: snip.rv = random_ipv6()`$0
endsnippet

snippet rap "random path" !w
`!p if not snip.c: snip.rv = random_path()`$0
endsnippet

snippet "rap(\d+)" "random path of length n" !wr
`!p if not snip.c: snip.rv = random_path(int(match.group(1)))`$0
endsnippet

global !p
def random_ip():
	return ".".join(map(str, (random.randint(1, 255) for _ in range(4))))
endglobal

global !p
def random_ipv6():
	bound = 16**4
	return '2001:face:' + ":".join(('%x' % random.randint(0, bound) for _ in range(6)))
endglobal

global !p
def random_path(length=3):
	components = ['foo', 'bar', 'baz', 'herp', 'derp', 'hoof', 'doof', 'hello', 'world']
	return '/' + str(os.path.join(*random.sample(components, min([length, len(components)]))))
endglobal
